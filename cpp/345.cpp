#include <iostream>
#include <queue>
#include <cstring>

using namespace std;

const int TEST[5][5] = {
  {7,53,183,439,863},
  {497,383,563,79,973},
  {287,63,343,169,583},
  {627,343,773,959,943},
  {767,473,103,699,303},
};

const int CASE[15][15] = {
  {7, 53, 183, 439, 863, 497, 383, 563, 79, 973, 287, 63, 343, 169, 583},
  {627, 343, 773, 959, 943, 767, 473, 103, 699, 303, 957, 703, 583, 639, 913},
  {447, 283, 463, 29, 23, 487, 463, 993, 119, 883, 327, 493, 423, 159, 743},
  {217, 623,  3, 399, 853, 407, 103, 983, 89, 463, 290, 516, 212, 462, 350},
  {960, 376, 682, 962, 300, 780, 486, 502, 912, 800, 250, 346, 172, 812, 350},
  {870, 456, 192, 162, 593, 473, 915, 45, 989, 873, 823, 965, 425, 329, 803},
  {973, 965, 905, 919, 133, 673, 665, 235, 509, 613, 673, 815, 165, 992, 326},
  {322, 148, 972, 962, 286, 255, 941, 541, 265, 323, 925, 281, 601, 95, 973},
  {445, 721, 11, 525, 473, 65, 511, 164, 138, 672, 18, 428, 154, 448, 848},
  {414, 456, 310, 312, 798, 104, 566, 520, 302, 248, 694, 976, 430, 392, 198},
  {184, 829, 373, 181, 631, 101, 969, 613, 840, 740, 778, 458, 284, 760, 390},
  {821, 461, 843, 513, 17, 901, 711, 993, 293, 157, 274, 94, 192, 156, 574},
  {34, 124,  4, 878, 450, 476, 712, 914, 838, 669, 875, 299, 823, 329, 699},
  {815, 559, 813, 459, 522, 788, 168, 586, 966, 232, 308, 833, 251, 631, 107},
  {813, 883, 451, 509, 615, 77, 281, 613, 459, 205, 380, 274, 302, 35, 805},
};

const auto SOLVE = TEST;
const int N = 5;
int G[N * 3][N * 3];
bool visited[N * 3];
int parent[N * 3];
int match[N * 3];
int source = 0;
int sink = 0;
const int infty = 1000000;


int dfs(int v){
  if (visited[v]) {
    return 0;
  }
  visited[v] = true;
  for (int i = 0 ; i < N; i++) {
    if (G[v][i] && (match[i] == -1 || (G[v][i] > && dfs(match[i])))) {
      match[i] = v;
      return min(flow, G[v][i]);
    }
  }
  return 0;
}

int bipartit_matching() {
	int flow = 0;
	for (int i = 0; i < f; i++) {
		memset(visited, 0, sizeof(visited));
		flow += dfs(i);
	}
	return flow;
}



int main() {
  source = 0;
  sink = 2 * N + 1;
  for (int i = 0; i < N; i++) {
    G[source][1 + i] = 1;
    G[1 + i + N][sink] = 1;
    for(int j = 0; j < N; j++) {
      G[1 + i][1 + j + N] = SOLVE[i][j];
    }
  }

  while
  return 0;
}
