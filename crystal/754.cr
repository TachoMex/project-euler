require "./lib/number_theory"

include NumberTheory

# # primes, sieve = sieve(10000)

# F = 10i64
# N = 100_000_000 # F * F

N = 100_000_000
MOD = 1_000_000_007

# # p (1..10).map{ |k| (1..k).reject { |i| gcd(i, k) != 1 } }.flatten.reduce  { |a, b| a.to_big_i * b}
# # p (1..10).map{ |k| (1..k).reject { |i| gcd(i, k) != 1 } }
# # p (1..10).map{ |k| (1..k).reject { |i| gcd(i, k) != 1 } }.flatten.group_by { |v| v }.to_h { |k, v| { k, v.size } }

# # # pp (1..10000).map { |k| (1..k).reject { |i| gcd(i, k) != 1 }.map { |i| prime_factors_expanded(i, primes) } }.flatten.group_by { |v| v }.to_h { |k, v|  {k, v.size} }

# # p (2..10).map { |i| {i, 11 - 10 // i - i } }

# # def f(n : Int64)
# #   ans = [] of Tuple(Int64, Int64)
# #   count = 1

# #   a, b, c, d = 0i64, 1i64, 1i64, n
# #   while c <= n
# #     k = (n + b) // d
# #     a, b, c, d = c, d, k * c - a, k * d - b
# #     if a >= 1 && a != b
# #       ans << { a, b }
# #     end
# #   end
# #   ans
# # end

# visited = Set(Tuple(Int64, Int64)).new

# queue = Deque(Tuple(Int64, Int64)).new
# # visited.each do |t|
# #   queue << t
# # end

# queue << {1i64, 2i64}
# # visited << {1i64, 2i64}

# # puts visited.size

# ans = 1.to_big_i

# while !queue.empty?
#   a, b = queue.pop
#   ans *= a
#   ans %= MOD
#   # puts "#{a} #{b}"
#   # ans %= MOD
#   # puts "#{a} #{b}" if a > F && b > F
#   c = a + b
#   if c <= N
#     t1 = c < b ? { c, b } : { b, c }
#     # unless visited.includes?(t1) && b != c
#       queue << t1
#       # visited << t1
#     # end
#     t1 = a < c ? { a, c } : { c, a }
#     # unless visited.includes?(t1) && c != a
#       queue << t1
#       # visited << t1
#     # end
#   end
# end

# puts ans
# # puts visited.to_a.map { |a, b| a }.reduce { |a, b| a *  b % MOD }


# #       -        2            3            5           7
# #    10 -       14*69*2       8*45*3       4*148       3*141
# #   100 -     1942*103     1092*104     594*106     423*104
# #  1000 -   201880*100   113592*100   63042*100   44187*100
# # 10000 - 20256358     11394196     6328906     4430702
# # f(100) = 22980825970184297229007428015829297763283574898971168612005542268926142790389744011150170341528250034340919282957525440450786382070797564000381192488171962385761562575870833701569058857838332036965178520426879058205051169707196911438356931504743282826321815395275311211528051243288232242561228168768496416807668817460973661598102019008091685329216249348127136878385489717339213772741409133830370459956612750314760688453392067391666366274591105759788011553198957187986568088047051857604651926181164474637591267761626992697823217662260130937898071229860668322613741966758466189025782713317303458337317751204278079247556036618710283525413301734954721600321765553932945006974422554217353361612235472693738032723864005111523573055215194539961713524763296046902920101194158279778707156303831526867398415678350912784316415059209401662563139333515305976255127965335448596694293792598797742671536674725246132264466503623069380581071217232467046090166555032016775663308759844207624201509278107524526632015011758833071371323998610656180272421619827271567535041416084006803632352080668503773396854748800063133511735583665007498436251016276182724319067734476416286440609087493460398849208488647129554256448644490139070384295569734256875630509768843430070995619573641286202861174587713869201719142661104606229148498655403592953952147030961429955425935982772298598911767618979274812191023315012741815777446305320265705836064745796966222809536317891657692376951425419823846549815125701392702196459790622597941872874564069309642856654549774525647062564713088864131447277552318153160518368410529703168109056898188939828954477804967480406156332959949403755879586421804636871549983224076255774886385574995638125028980243817479145818882738776155049468236315042962633560132884810997716498424796692041417077105163911025008230360986074250519851108418517302057584404376142620781782094053181063130823210591008846174592344753680524656223182317752981422270067176042982484887759181413856624076604101845637156114853713943626417393617120449501007465381368007695910301878371734491575293215866401671412739203102400374351914154083369392597604968946815498778713616897285901191832914579587291253464859810191028986575048685909893537618914425919552500714634899108574318627489640672993986511910083137675105843504904125292919905188360314620066639940253990989884299448646540673327532421596139281127488902193589271019261964451741214421087411758658987396252867320106155680732587774467961820499303938546309454512262206294672377665084663146283253855563785638204168211962175587117887102211083976900575473531433130403717971109537152589005309734306434343961066582295775553917245404462206225621522702953310769640359357701280739052331920743381460264978880725336206232944336823476303543969066680755926972911819709674084652492575762090648135286740336536381947108293621152238465206724314704259683704244746979625931317869536890711396293528482721879698608573114304329254820618818479119163644552818351095648116958893521910648827120239137528947392586436161681430053497207897224934045118305444035147813424226102086240632063778319569271860350736311067203828219475368640179652164298077315527333490406030682414998548186825876696706674712858165121716339635939590070800515298425299421016560982831416459197790098726149484451873147436811876294110907543344194422171209156932737934772522940765184928584448569679990649516587678301984699834583463011076097841039552886903767830439984863416404498981188148983359645102975903356490421333456121689125358754446155189994606346853387585172078788986791687880704000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
# #        = 777776709

sieve = Array(Bool).new(N + 1, true)
div_factors = Array(Array(Int32)).new(N + 1) { Array(Int32).new }

sieve[0] = false
sieve[1] = false

def phi_e(n, primes)
  ans = 1
  primes.each do |p|
    count = 0
    while n % p == 0
      n //= p
      count += 1
    end
    ans *= (p - 1) * (p ** (count - 1))
  end
  ans
end


ans = BigInt.new(1)
FACTORIALS = (1i64..N).each_with_object(Array(Int128).new(N+1) { Int128.new(1) }) { |i, objct| objct[i] = objct[i-1i64] * i % MOD; objct }

def rec_factors(factors, k, taken, index, n)
  if index >= factors.size
    d = (n // k).to_big_i
    term = FACTORIALS[d] * inv(modpow(d, d, MOD.to_big_i), MOD) % MOD
    if taken.even?
      term
      # puts "F(#{n}) => #{d}! / #{d}**#{d} = #{term}"
    else
      term = inv(term, MOD.to_big_i)
      # puts "F(#{n}) => #{d}**#{d} / #{d}! = #{term}"
    end
    term
  else
    rec_factors(factors, k, taken, index + 1, n) * rec_factors(factors, k * factors[index], taken + 1, index + 1, n) % MOD
  end
end

(2..N).each do |i|
  puts i if i % 100000 == 0
  if sieve[i]
    (i + i..N).step(i).each do |j|
      sieve[j] = false
      div_factors[j] << i
    end
    ans = ans * FACTORIALS[i - 1] % MOD
  else
    phi = phi_e(i, div_factors[i])
    term = rec_factors(div_factors[i], 1i64, 0, 0, i)
    term2 = modpow(i.to_i128, phi.to_i128, MOD) % MOD
    # puts "#{i} #{term} #{term2}"
    ans = ans * term % MOD * term2 % MOD
  end
  # div_factors[i].shift(div_factors[i].size)
end
puts ans

# puts rec_factors([2, 5], 1i64, 0, 0, 10)


# (2!  * 2**2) with 5::false
# (5!  * 5**5) with 2::false

# 3  7  9
# ---------------------
# 10**4



# F(10) => 10! / 10**10 = 603957868
# F(10) => 2**2 / 2! = 594943457
# F(10) => 5**5 / 5! = 108368560
# F(10) => 1! / 1**1 = 1
# 542314639
